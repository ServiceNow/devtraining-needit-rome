<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_58872_needit_needit</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>NeedIt Quando necessario campo data</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	// Add your code here
	// Instantiate the NeedItUtils class.  Call the isDatePast method and pass 
  // the u_when_needed value.
  var niutils = new NeedItUtils();
  
   // dichiarazione e inzializzazione variabile di appoggio
  var dataCorrente = current.u_when_needed;
	
  // richiamo funzioni e salvo il loro valore di ritorno
  var isPast = niutils.isDatePast(dataCorrente); // funzione che controlla se la data è nel passato
  var isDateToday = niutils.isDateToday(dataCorrente); // funzione che controlla se la data è quella odierna
  
  // If the isDatePast method returns true, the date is in the past.
  if(isPast == true && isDateToday == false){
    gs.addErrorMessage("La data impostata non può essere al passato.  Your request has not been saved to the database.");
    current.setAbortAction(true);
  }
	
  // Sfida - Controllo data odierna
  if(isDateToday == true) {
	gs.addErrorMessage("La data impostata non può essere al presente.  La tua richiesta non è stata salvata nel database.");
	current.setAbortAction(true);
  }
	/* SFIDA SUPERATA - AGGIUNTA DI UNA CLASSE CHE USA LA STESSA FUNZIONE
	// Sfida - Impossibile selezionare il giorno corrente
  var oggi = rightnow.getLocalDate();  // ottengo la data corrente ovvero di oggi
  var dataInserita = whenNeeded.getLocalDate(); // ottengo la data inserita dall'utente
  // Confronto le date se sono uguali
  if(today.compareTo(istoday) == 0){
	// se le date sono uguali stampo un messaggio
    gs.addErrorMessage("Non è possibile selezionare la data odierna!");
    current.setAbortAction(true); // interrompo la query al database
  } */ 

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-01-12 15:58:31</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>9188c0499705411050de3e2e6253af5c</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>NeedIt Quando necessario campo data</sys_name>
        <sys_overrides/>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_script_9188c0499705411050de3e2e6253af5c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-01-13 11:00:30</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=9188c0499705411050de3e2e6253af5c"/>
</record_update>
